name: Salesforce CI/CD Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Git history
        run: |
          git fetch --prune --unshallow || true
          git fetch origin main

      - name: Detect Apex Changes and Set Test Level
        id: detect_apex
        run: |
            echo "Checking for Apex changes..."
            git fetch origin main
            git diff --name-only origin/main > changed_files.txt
            cat changed_files.txt

            APEX_FILES=$(grep -E '\.cls$|\.trigger$' changed_files.txt || true)

            # Define test class naming patterns
            TEST_CLASSES=$(echo "$APEX_FILES" | grep -o '[^/]*\.cls' | sed 's/\.cls//' | \
              grep -E '_Test$|Test$|_test$|test$|TestClass$|Tst1$|Testclass$|Tst$|^Test' | \
              tr '\n' ',' | sed 's/,$//')

            if [[ -n "$TEST_CLASSES" ]]; then
              echo "Detected test-relevant classes: $TEST_CLASSES"
              echo "TEST_LEVEL=RunSpecifiedTests" >> $GITHUB_ENV
              echo "TEST_CLASSES=$TEST_CLASSES" >> $GITHUB_ENV
            else
              echo "No Apex test class changes found."
              echo "TEST_LEVEL=NoTestRun" >> $GITHUB_ENV
            fi


      - name: Install Salesforce CLI
        run: npm install --global sfdx-cli

      - name: Authenticate to Salesforce (JWT)
        run: |
          echo "${{ secrets.SF_JWT_KEY }}" > server.key
          sfdx force:auth:jwt:grant \
            --clientid "${{ secrets.SF_CONSUMER_KEY }}" \
            --jwtkeyfile server.key \
            --username "${{ secrets.SF_USERNAME }}" \
            --instanceurl "${{ secrets.SF_LOGIN_URL }}" \
            --setalias deployOrg

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Convert Source to Metadata Format
        run: |
          mkdir mdapi_output
          sfdx force:source:convert --rootdir force-app --outputdir mdapi_output

      - name: Deploy Metadata and Capture Output
        run: |
          echo "Starting deployment with test level: $TEST_LEVEL"

          DEPLOY_CMD="sfdx force:mdapi:deploy --deploydir mdapi_output --targetusername deployOrg --wait 10 --json"

          if [[ "$TEST_LEVEL" == "RunSpecifiedTests" && -n "$TEST_CLASSES" ]]; then
            DEPLOY_CMD="$DEPLOY_CMD --testlevel RunSpecifiedTests --tests $TEST_CLASSES"
          else
            DEPLOY_CMD="$DEPLOY_CMD --testlevel $TEST_LEVEL"
          fi

          echo "Running command: $DEPLOY_CMD"
          DEPLOY_RESULT=$($DEPLOY_CMD) || true

          echo "$DEPLOY_RESULT" > deploy-result.json

          DEPLOY_ID=$(jq -r '.result.id // "N/A"' deploy-result.json)
          ERROR_MSG=$(jq -r '.message // empty' deploy-result.json)
          COMPONENT_ERRORS=$(jq -r '.result.details.componentFailures[]? | "\(.componentType) \(.fullName): \(.problem)"' deploy-result.json)
          TEST_ERRORS=$(jq -r '.result.details.runTestResult.failures[]? | "\(.name).\(.methodName): \(.message)"' deploy-result.json)
          DEPLOY_STATUS=$(jq -r '.status // 1' deploy-result.json)

          echo "===== Deployment Summary ====="
          echo "Deployment ID: $DEPLOY_ID"

          if [[ -n "$ERROR_MSG" ]]; then
            echo "Error Message:"
            echo "$ERROR_MSG"
          fi

          if [[ -n "$COMPONENT_ERRORS" ]]; then
            echo "Component Errors:"
            echo "$COMPONENT_ERRORS"
          fi

          if [[ -n "$TEST_ERRORS" ]]; then
            echo "Test Failures:"
            echo "$TEST_ERRORS"
          fi

          echo "==============================="

          echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_ENV

          if [[ "$DEPLOY_ID" == "N/A" || "$DEPLOY_STATUS" -ne 0 || -n "$ERROR_MSG" || -n "$COMPONENT_ERRORS" || -n "$TEST_ERRORS" ]]; then
            echo "Deployment failed due to errors."
            exit 1
          else
            echo "Deployment succeeded."
          fi
